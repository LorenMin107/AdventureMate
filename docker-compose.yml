services:
  # MongoDB Database
  mongodb:
    image: mongo:8.0
    container_name: adventuremate-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-adventure-mate}
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - adventuremate-network
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: adventuremate-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - adventuremate-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # AdventureMate Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: adventuremate-app
    restart: unless-stopped
    environment:
      # Node Environment
      NODE_ENV: development

      # Database Configuration
      # DB_URL: loaded from .env file
      DB_MAX_POOL_SIZE: 10
      DB_MIN_POOL_SIZE: 2

      # Redis Configuration
      REDIS_HOST: host.docker.internal
      # REDIS_PORT: loaded from .env file
      # REDIS_PASSWORD: loaded from .env file
      # REDIS_DB: loaded from .env file

      # Server Configuration
      PORT: 3001
      CLIENT_URL: http://localhost:5173

      # JWT Configuration
      JWT_ACCESS_TOKEN_SECRET: ${JWT_ACCESS_TOKEN_SECRET:-your-access-token-secret-dev}
      JWT_REFRESH_TOKEN_SECRET: ${JWT_REFRESH_TOKEN_SECRET:-your-refresh-token-secret-dev}

      # Email Configuration
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_SECURE: ${EMAIL_SECURE:-false}
      EMAIL_USER: ${EMAIL_USER:-}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD:-}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@adventuremate.com}

      # Cloudinary Configuration
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME:-}
      CLOUDINARY_KEY: ${CLOUDINARY_KEY:-}
      CLOUDINARY_SECRET: ${CLOUDINARY_SECRET:-}
      CLOUDINARY_FOLDER: AdventureMate

      # Mapbox Configuration
      MAPBOX_TOKEN: ${MAPBOX_TOKEN:-}

      # Stripe Configuration
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-}
      STRIPE_PUBLIC_KEY: ${STRIPE_PUBLIC_KEY:-}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-}

      # OpenWeather Configuration
      OPENWEATHER_KEY: ${OPENWEATHER_KEY:-}

      # Logging
      LOG_LEVEL: 2
    ports:
      - '3001:3001' # Backend API
      - '5173:5173' # Frontend Dev Server
    volumes:
      - .:/app
      - /app/node_modules
      - /app/client/node_modules
      - app_logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - adventuremate-network
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:3001/api/v1/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MongoDB Express (Optional - for database management)
  mongo-express:
    image: mongo-express:latest
    container_name: adventuremate-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD:-password}
    ports:
      - '8081:8081'
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - adventuremate-network
    profiles:
      - tools

  # Redis Commander (Optional - for Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: adventuremate-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - '8082:8081'
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - adventuremate-network
    profiles:
      - tools

  # Nginx Reverse Proxy (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: adventuremate-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - adventuremate-network
    profiles:
      - production

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local

networks:
  adventuremate-network:
    driver: bridge
